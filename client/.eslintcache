[{"C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\index.js":"1","C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\Routes.js":"2","C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\core\\Dashboard.js":"3","C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\user\\SignIn.js":"4","C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\core\\ModalForm.js":"5","C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\api\\apiFunc.js":"6","C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\config.js":"7","C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\core\\DisplayItem.js":"8"},{"size":230,"mtime":1608822564107,"results":"9","hashOfConfig":"10"},{"size":505,"mtime":1608922033738,"results":"11","hashOfConfig":"10"},{"size":7666,"mtime":1608984786901,"results":"12","hashOfConfig":"10"},{"size":683,"mtime":1608777944719,"results":"13","hashOfConfig":"10"},{"size":3706,"mtime":1608978317075,"results":"14","hashOfConfig":"10"},{"size":987,"mtime":1608983866282,"results":"15","hashOfConfig":"10"},{"size":39,"mtime":1608910576024,"results":"16","hashOfConfig":"10"},{"size":1046,"mtime":1608972185926,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"eyva84",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\index.js",[],["38","39"],"C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\Routes.js",[],"C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\core\\Dashboard.js",["40","41","42","43","44"],"import React, {useState, useEffect} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nimport ModalForm from './ModalForm';\r\nimport DisplayItem from './DisplayItem';\r\n\r\nimport {createSlot, getSlots, list} from '../api/apiFunc';\r\n\r\nconst Dashboard = () => {\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [showSlots, setShowSlots] = useState(true);\r\n    const [startTime, setStartTime] = useState(new Date());\r\n    const [endTime, setEndTime] = useState(new Date());\r\n    const [isBooked, setIsBooked] = useState(false);\r\n    const [slotResult, setSlotResult ] = useState([]);\r\n    const [dateForSlotDisplay, setDateForSlotDisplay] = useState(new Date());\r\n\r\n    const [searchResult, setSearchResult] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [success, setSuccess] = useState(false);\r\n    \r\n    const listSlots = () => (\r\n        getSlots().then(data =>{\r\n            if(data.error){\r\n                setError(data.error);\r\n            }else{\r\n                console.log(\"Data from DB: \", data);\r\n                setSlotResult(data);\r\n                setSearchResult(false);\r\n            }\r\n        }\r\n        )\r\n    );\r\n\r\n    useEffect(()=>{\r\n        listSlots();\r\n        displaySlots();\r\n    }, []);\r\n\r\n    useEffect(()=> {\r\n        // console.log(\"Start Time: \", startTime);\r\n        // console.log(\"End Time: \", endTime);\r\n    }, [startTime, endTime]);\r\n\r\n    const searchData = (date) => {\r\n        if(date){\r\n            list({selectedDate: date || undefined})\r\n            .then(response => {\r\n                if(response.error){\r\n                    console.log(response.error);\r\n                }else{\r\n                    setSearchResult(response);\r\n                    setSlotResult(false);\r\n                    console.log(\"Searched Result: \", searchResult);\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const searchSubmit = (event) => {\r\n        event.preventDefault();\r\n        let day = dateForSlotDisplay.getDate();\r\n        let month = dateForSlotDisplay.getMonth() + 1;\r\n        let year = dateForSlotDisplay.getFullYear();\r\n        let date = `${month}-${day}-${year}`\r\n        searchData(date);\r\n    }\r\n    \r\n    const selectDate = () =>(\r\n        <form onSubmit={searchSubmit}>\r\n            <div>\r\n                <DatePicker selected={dateForSlotDisplay} dateFormat=\"dd/MM/yyyy\" showYearDropdown onChange={date => setDateForSlotDisplay(date)} />\r\n                <button className=\"input-group-text\">Search</button>\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n    const handleModal = event => {\r\n        setShowModal(!showModal);\r\n    }\r\n\r\n\r\n    const handleSubmit = (event) => {\r\n        // console.log(showModal);\r\n        // setShowModal(!showModal);\r\n        let day = selectedDate.getDate();\r\n        let month = selectedDate.getMonth() + 1;\r\n        let year = selectedDate.getFullYear();\r\n        // console.log(\"Date Selected: \",(`${day} ${month} ${year}`));\r\n        let startHr = startTime.getHours();\r\n        let startMin = startTime.getMinutes();\r\n\r\n        let endHr = endTime.getHours();\r\n        let endMin = endTime.getMinutes();\r\n        \r\n        let modifiedSelectedDate = `${month}-${day}-${year}`;\r\n        let modifiedStartTime = `${month}-${day}-${year} ${startHr}:${startMin}`\r\n        let modifiedEndTime = `${month}-${day}-${year} ${endHr}:${endMin}`\r\n\r\n        let diffTime1 = new Date(`${month}-${day}-${year} ${startHr}:${startMin}`)\r\n        let diffTime2 = new Date(`${month}-${day}-${year} ${endHr}:${endMin}`)\r\n        console.log(\"End  > Start : \",(diffTime2.getTime() > diffTime1.getTime()))\r\n        console.log(\"Time Difference: \", (diffTime2.getTime() - diffTime1.getTime()))\r\n\r\n        if((diffTime2.getTime() > diffTime1.getTime()) && ((diffTime2.getTime() - diffTime1.getTime()) <= 30*60*1000)){    \r\n            let payload = {\r\n                selectedDate: modifiedSelectedDate,\r\n                startTime: modifiedStartTime,\r\n                endTime: modifiedEndTime,\r\n                isBooked\r\n            }\r\n            createSlot(payload).then(data => {\r\n                if(data.error){\r\n                    setError(data.error)\r\n                }else{\r\n                    setError('');\r\n                    setSuccess(true);\r\n                }\r\n            });\r\n            console.log(payload)\r\n        }else{\r\n            diffTime2.getTime() < diffTime1.getTime() ? setError(\"End Time should be greater than Start Time\") : \r\n                setError(\"Slot time should not exceed 30 min\")\r\n        }\r\n        \r\n    }\r\n\r\n    const handleSelectedDate = (date) => {\r\n        // let formatDate = date.getDate();\r\n        // let formatMonth = date.getMonth();\r\n        // let formatYear = date.getYear();\r\n        // let finalDate = new Date(`${formatDate}/${formatMonth}/${formatYear}`)\r\n        setSelectedDate(date);\r\n        console.log(\"Date from Props: \", selectedDate);\r\n    }\r\n\r\n    const handleStartTime = (date) => {\r\n        setStartTime(date);\r\n        console.log(\"StartTime from Props: \", startTime);\r\n    }\r\n    const handleEndTime = (date) => {\r\n        setEndTime(date);\r\n        console.log(\"EndTime from Props: \", endTime);\r\n    }\r\n     \r\n    const displaySlots = () => (\r\n        <div>\r\n            <h2>List Slots:</h2> {selectDate()}\r\n                {/* {JSON.stringify(slotResult)} */}\r\n            <div className=\"row\">\r\n                {slotResult && slotResult.map((slot, i) => (\r\n                    <div key={i} className=\"col-xs\">\r\n                        <DisplayItem item={slot} />\r\n                    </div>\r\n                ))}\r\n                {searchResult && searchResult.map((slot, i) => (\r\n                    <div key={i} className=\"col-xs\">\r\n                        <DisplayItem item={slot} />\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n    \r\n    \r\n    const showMenu = () => {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"container\">\r\n                <ul className=\"nav bg-primary\">\r\n                    <li className=\"nav-item\" onClick={listSlots}>\r\n                        <Link className=\"btn btn-primary\" to=\"/doctor/dashboard\" >List Slots</Link>\r\n                    </li>\r\n    \r\n                    <li className=\"nav-item\">\r\n                        <button className=\"btn btn-primary\" onClick={handleModal} >Add Slot</button>\r\n                    </li>\r\n                </ul>\r\n                </div>\r\n                    <div className=\"container\">\r\n                        {displaySlots()}\r\n                    </div>\r\n                \r\n                <div className=\"container\">\r\n                    <ModalForm \r\n                        onClose={handleModal}\r\n                        selectedDate={selectedDate} \r\n                        startTime={startTime} \r\n                        endTime={endTime} \r\n                        show={showModal} \r\n                        handleSelectedDate={handleSelectedDate}\r\n                        handleStartTime={handleStartTime}\r\n                        handleEndTime={handleEndTime}\r\n                        handleSubmit={handleSubmit}\r\n                        success={success}\r\n                        error={error}\r\n                        />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    return(\r\n        <div>\r\n            {showMenu()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\user\\SignIn.js",[],"C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\core\\ModalForm.js",["45","46"],"import React, {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport DatePicker from 'react-datepicker';\r\n\r\nconst ModalForm = (props) => {\r\n    \r\n    const onCloseButton = event => {\r\n        console.log(props.show)\r\n        props.onClose && props.onClose(event);\r\n    }\r\n\r\n    const handleSelectedDate = date => {\r\n        props.handleSelectedDate && props.handleSelectedDate(date);\r\n    }\r\n\r\n    const handleStartTime = date => {\r\n        props.handleStartTime && props.handleStartTime(date)\r\n    }\r\n    \r\n    const handleEndTime = date => {\r\n        props.handleEndTime && props.handleEndTime(date)\r\n    }\r\n    \r\n\r\n\r\n    const handleSubmit = event => {\r\n        props.handleSubmit && props.handleSubmit(event)\r\n    }\r\n\r\n    if(!props.show){\r\n        return null;\r\n    }\r\n\r\n    return(\r\n        <Modal {...props} aria-labelledby=\"contained-modal-title-vcenter\" onHide={onCloseButton} centered >\r\n            <Modal.Header>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Add Slot\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                    \r\n                    <div className=\"row align-items-center\">\r\n                        <div className=\"col\">\r\n                            <h5>Select Date</h5>\r\n                            <DatePicker selected={props.selectedDate} dateFormat=\"dd/MM/yyyy\" onChange={date => handleSelectedDate(date)} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                        <h5>Start Time</h5>\r\n                        <DatePicker\r\n                            selected={props.startTime}\r\n                            onChange={date => handleStartTime(date)}\r\n                            showTimeSelect\r\n                            showTimeSelectOnly\r\n                            timeIntervals={15}\r\n                            timeCaption=\"Time\"\r\n                            dateFormat=\"HH:mm\"\r\n                            timeFormat=\"HH:mm\"\r\n                            />\r\n                        </div>\r\n                    \r\n                        <div className=\"col\">\r\n                        <h5>End Time</h5>\r\n                        <DatePicker\r\n                            selected={props.endTime}\r\n                            onChange={date => handleEndTime(date)}\r\n                            showTimeSelect\r\n                            showTimeSelectOnly\r\n                            timeIntervals={15}\r\n                            timeCaption=\"Time\"\r\n                            dateFormat=\"HH:mm\"\r\n                            timeFormat=\"HH:mm\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Button onClick={handleSubmit}>Add</Button>\r\n                {props.error && <span className=\"col md-8\">{props.error}</span>}\r\n            </form>\r\n                \r\n            </Modal.Body>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nModalForm.propTypes = {\r\n    onClose: PropTypes.func.isRequired,\r\n    show: PropTypes.bool.isRequired,\r\n    handleSelectedDate: PropTypes.func.isRequired,\r\n    handleStartTime: PropTypes.func.isRequired,\r\n    handleEndTime: PropTypes.func.isRequired,\r\n    selectedDate: PropTypes.instanceOf(Date).isRequired,\r\n    startTime: PropTypes.instanceOf(Date).isRequired,\r\n    endTime: PropTypes.instanceOf(Date).isRequired\r\n  };\r\n\r\nexport default ModalForm;","C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\api\\apiFunc.js",[],"C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\config.js",[],["47","48"],"C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\core\\DisplayItem.js",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":2,"column":8,"nodeType":"55","messageId":"56","endLine":2,"endColumn":16},{"ruleId":"53","severity":1,"message":"57","line":15,"column":12,"nodeType":"55","messageId":"56","endLine":15,"endColumn":21},{"ruleId":"53","severity":1,"message":"58","line":15,"column":23,"nodeType":"55","messageId":"56","endLine":15,"endColumn":35},{"ruleId":"53","severity":1,"message":"59","line":18,"column":22,"nodeType":"55","messageId":"56","endLine":18,"endColumn":33},{"ruleId":"60","severity":1,"message":"61","line":42,"column":8,"nodeType":"62","endLine":42,"endColumn":10,"suggestions":"63"},{"ruleId":"53","severity":1,"message":"64","line":1,"column":16,"nodeType":"55","messageId":"56","endLine":1,"endColumn":24},{"ruleId":"53","severity":1,"message":"65","line":1,"column":26,"nodeType":"55","messageId":"56","endLine":1,"endColumn":35},{"ruleId":"49","replacedBy":"66"},{"ruleId":"51","replacedBy":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'showSlots' is assigned a value but never used.","'setShowSlots' is assigned a value but never used.","'setIsBooked' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'displaySlots'. Either include it or remove the dependency array.","ArrayExpression",["70"],"'useState' is defined but never used.","'useEffect' is defined but never used.",["68"],["69"],"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},"Update the dependencies array to be: [displaySlots]",{"range":"73","text":"74"},[1462,1464],"[displaySlots]"]