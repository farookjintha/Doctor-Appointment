[{"C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\index.js":"1","C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\Routes.js":"2","C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\core\\Dashboard.js":"3","C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\user\\SignIn.js":"4","C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\core\\ModalForm.js":"5","C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\api\\apiFunc.js":"6","C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\config.js":"7","C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\core\\DisplayItem.js":"8","C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\core\\Appointment.js":"9","C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\core\\TableData.js":"10"},{"size":230,"mtime":1608822564107,"results":"11","hashOfConfig":"12"},{"size":637,"mtime":1609011772604,"results":"13","hashOfConfig":"12"},{"size":9555,"mtime":1609053570647,"results":"14","hashOfConfig":"12"},{"size":683,"mtime":1608777944719,"results":"15","hashOfConfig":"12"},{"size":3706,"mtime":1608978317075,"results":"16","hashOfConfig":"12"},{"size":1557,"mtime":1609005980934,"results":"17","hashOfConfig":"12"},{"size":39,"mtime":1608910576024,"results":"18","hashOfConfig":"12"},{"size":1046,"mtime":1609004787670,"results":"19","hashOfConfig":"12"},{"size":3999,"mtime":1609014710101,"results":"20","hashOfConfig":"12"},{"size":1146,"mtime":1609014759968,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"eyva84",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\index.js",[],["47","48"],"C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\Routes.js",[],"C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\core\\Dashboard.js",["49","50","51","52","53","54","55"],"import React, {useState, useEffect} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nimport ModalForm from './ModalForm';\r\nimport DisplayItem from './DisplayItem';\r\n\r\nimport {createSlot, getSlots, list, getAppointmentData, listAppointments } from '../api/apiFunc';\r\n\r\nconst Dashboard = () => {\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [showSlots, setShowSlots] = useState(true);\r\n    const [startTime, setStartTime] = useState(new Date());\r\n    const [endTime, setEndTime] = useState(new Date());\r\n    const [isBooked, setIsBooked] = useState(false);\r\n    const [slotResult, setSlotResult ] = useState([]);\r\n    const [dateForSlotDisplay, setDateForSlotDisplay] = useState(new Date());\r\n\r\n    const [searchResult, setSearchResult] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [success, setSuccess] = useState(false);\r\n    const [morningData, setMorningData] = useState([]);\r\n    const [eveningData, setEveningData] = useState([])\r\n\r\n    \r\n\r\n    // const [appointmentData, setAppointmentData] = useState({\r\n    //     patientName: '',\r\n    //     selectedDateAppointment: '',\r\n    //     startTimeAppointment: '',\r\n    //     endTimeAppointment: ''\r\n    // });\r\n\r\n    // const {patientName, selectedDateAppointment, startTimeAppointment, endTimeAppointment} = appointmentData;\r\n    \r\n    const listSlots = () => (\r\n        getSlots().then(data =>{\r\n            if(data.error){\r\n                setError(data.error);\r\n            }else{\r\n                console.log(\"Data from DB: \", data);\r\n                setError('')\r\n                setSearchResult(false);\r\n                setSlotResult(data);\r\n                handleMrngEvngData();\r\n            }\r\n        })\r\n    );\r\n    \r\n    const searchSlotData = (date) => {\r\n        if(date){\r\n            list({selectedDate: date || undefined})\r\n            .then(response => {\r\n                if(response.error){\r\n                    console.log(response.error);\r\n                }else{\r\n                    setSlotResult(false);\r\n                    setSearchResult(response);\r\n                    console.log(\"Search Result aaaaa: \", searchResult)\r\n                    handleMrngEvngData();\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        listSlots();\r\n        displaySlots();\r\n    }, []);\r\n\r\n\r\n    const handleMrngEvngData = () => {\r\n        // let mrngData = [];\r\n        // let evngData = [];\r\n        if(searchResult){\r\n            let mrngData = searchResult.filter(slot => new Date(slot.startTime).getHours() < 12);\r\n            let evngData = searchResult.filter(slot => new Date(slot.startTime).getHours() > 12);\r\n            setMorningData(mrngData);\r\n            setEveningData(evngData);\r\n            console.log(\"mrngData on Search Result: \", mrngData);\r\n            console.log(\"evngData on Search Result: \", evngData);\r\n        }\r\n    }\r\n\r\n    \r\n    const searchSubmit = (event) => {\r\n        event.preventDefault();\r\n        let day = dateForSlotDisplay.getDate();\r\n        let month = dateForSlotDisplay.getMonth() + 1;\r\n        let year = dateForSlotDisplay.getFullYear();\r\n        let date = `${month}-${day}-${year}`\r\n        searchSlotData(date);\r\n    }\r\n    \r\n    const selectDate = () =>(\r\n        <form onSubmit={searchSubmit}>\r\n            <div>\r\n                <DatePicker selected={dateForSlotDisplay} dateFormat=\"dd/MM/yyyy\" showYearDropdown onChange={date => setDateForSlotDisplay(date)} />\r\n                <button className=\"input-group-text\">Search</button>\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n    const handleModal = event => {\r\n        setShowModal(!showModal);\r\n    }\r\n\r\n\r\n    const handleSubmit = (event) => {\r\n        // console.log(showModal);\r\n        // setShowModal(!showModal);\r\n        let day = selectedDate.getDate();\r\n        let month = selectedDate.getMonth() + 1;\r\n        let year = selectedDate.getFullYear();\r\n        // console.log(\"Date Selected: \",(`${day} ${month} ${year}`));\r\n        let startHr = startTime.getHours();\r\n        let startMin = startTime.getMinutes();\r\n\r\n        let endHr = endTime.getHours();\r\n        let endMin = endTime.getMinutes();\r\n        \r\n        let modifiedSelectedDate = `${month}-${day}-${year}`;\r\n        let modifiedStartTime = `${month}-${day}-${year} ${startHr}:${startMin}`\r\n        let modifiedEndTime = `${month}-${day}-${year} ${endHr}:${endMin}`\r\n\r\n        let diffTime1 = new Date(`${month}-${day}-${year} ${startHr}:${startMin}`)\r\n        let diffTime2 = new Date(`${month}-${day}-${year} ${endHr}:${endMin}`)\r\n        console.log(\"End  > Start : \",(diffTime2.getTime() > diffTime1.getTime()))\r\n        console.log(\"Time Difference: \", (diffTime2.getTime() - diffTime1.getTime()))\r\n\r\n        if((diffTime2.getTime() > diffTime1.getTime()) && ((diffTime2.getTime() - diffTime1.getTime()) <= 30*60*1000)){    \r\n            let payload = {\r\n                selectedDate: modifiedSelectedDate,\r\n                startTime: modifiedStartTime,\r\n                endTime: modifiedEndTime,\r\n                isBooked\r\n            }\r\n            createSlot(payload).then(data => {\r\n                if(data.error){\r\n                    setError(data.error)\r\n                }else{\r\n                    setError('');\r\n                    setSuccess(true);\r\n                }\r\n            });\r\n            console.log(payload)\r\n        }else{\r\n            diffTime2.getTime() < diffTime1.getTime() ? setError(\"End Time should be greater than Start Time\") : \r\n                setError(\"Slot time should not exceed 30 min\")\r\n        }\r\n        \r\n    }\r\n\r\n    const handleSelectedDate = (date) => {\r\n        // let formatDate = date.getDate();\r\n        // let formatMonth = date.getMonth();\r\n        // let formatYear = date.getYear();\r\n        // let finalDate = new Date(`${formatDate}/${formatMonth}/${formatYear}`)\r\n        setSelectedDate(date);\r\n        console.log(\"Date from Props: \", selectedDate);\r\n    }\r\n\r\n    const handleStartTime = (date) => {\r\n        setStartTime(date);\r\n        console.log(\"StartTime from Props: \", startTime);\r\n    }\r\n    const handleEndTime = (date) => {\r\n        setEndTime(date);\r\n        console.log(\"EndTime from Props: \", endTime);\r\n    }\r\n     \r\n    const displaySlots = () => (\r\n        <div>\r\n            <h2>List Slots:</h2> {selectDate()}\r\n                {/* {JSON.stringify(slotResult)} */}\r\n            <div className=\"row\">\r\n                {slotResult && slotResult.map((slot, i) => (\r\n                    <div key={i} className=\"col-xs\">\r\n                        <DisplayItem item={slot} />\r\n                    </div>\r\n                ))}\r\n                <div className = \"column\">\r\n                    <div className=\"row\">\r\n                        {searchResult && <div>Morning Slots: </div>}\r\n                        {searchResult && morningData  && morningData.map((slot, i) => (\r\n                            <div key={i} className=\" col-xs\">\r\n                                <DisplayItem item={slot} />\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        {searchResult && <div>Evening Slots: </div>}\r\n                        {searchResult && eveningData && eveningData.map((slot, i) => (\r\n                            <div key={i} className=\"col-xs\">\r\n                                <DisplayItem item={slot} />\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n    \r\n    \r\n    const showMenu = () => {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"container\">\r\n                <ul className=\"nav bg-primary\">\r\n                    <li className=\"nav-item\" onClick={listSlots}>\r\n                        <Link className=\"btn btn-primary\" to=\"/doctor/dashboard\" >List Slots</Link>\r\n                    </li>\r\n    \r\n                    <li className=\"nav-item\">\r\n                        <button className=\"btn btn-primary\" onClick={handleModal} >Add Slot</button>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"btn btn-primary\" to=\"/doctor/appointments\" >Appointments</Link>\r\n                    </li>\r\n                </ul>\r\n                </div>\r\n                    <div className=\"container\">\r\n                        {displaySlots()}\r\n                    </div>\r\n                \r\n                <div className=\"container\">\r\n                    <ModalForm \r\n                        onClose={handleModal}\r\n                        selectedDate={selectedDate} \r\n                        startTime={startTime} \r\n                        endTime={endTime} \r\n                        show={showModal} \r\n                        handleSelectedDate={handleSelectedDate}\r\n                        handleStartTime={handleStartTime}\r\n                        handleEndTime={handleEndTime}\r\n                        handleSubmit={handleSubmit}\r\n                        success={success}\r\n                        error={error}\r\n                        />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    return(\r\n        <div>\r\n            {showMenu()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\user\\SignIn.js",[],"C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\core\\ModalForm.js",["56","57"],"import React, {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport DatePicker from 'react-datepicker';\r\n\r\nconst ModalForm = (props) => {\r\n    \r\n    const onCloseButton = event => {\r\n        console.log(props.show)\r\n        props.onClose && props.onClose(event);\r\n    }\r\n\r\n    const handleSelectedDate = date => {\r\n        props.handleSelectedDate && props.handleSelectedDate(date);\r\n    }\r\n\r\n    const handleStartTime = date => {\r\n        props.handleStartTime && props.handleStartTime(date)\r\n    }\r\n    \r\n    const handleEndTime = date => {\r\n        props.handleEndTime && props.handleEndTime(date)\r\n    }\r\n    \r\n\r\n\r\n    const handleSubmit = event => {\r\n        props.handleSubmit && props.handleSubmit(event)\r\n    }\r\n\r\n    if(!props.show){\r\n        return null;\r\n    }\r\n\r\n    return(\r\n        <Modal {...props} aria-labelledby=\"contained-modal-title-vcenter\" onHide={onCloseButton} centered >\r\n            <Modal.Header>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Add Slot\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                    \r\n                    <div className=\"row align-items-center\">\r\n                        <div className=\"col\">\r\n                            <h5>Select Date</h5>\r\n                            <DatePicker selected={props.selectedDate} dateFormat=\"dd/MM/yyyy\" onChange={date => handleSelectedDate(date)} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                        <h5>Start Time</h5>\r\n                        <DatePicker\r\n                            selected={props.startTime}\r\n                            onChange={date => handleStartTime(date)}\r\n                            showTimeSelect\r\n                            showTimeSelectOnly\r\n                            timeIntervals={15}\r\n                            timeCaption=\"Time\"\r\n                            dateFormat=\"HH:mm\"\r\n                            timeFormat=\"HH:mm\"\r\n                            />\r\n                        </div>\r\n                    \r\n                        <div className=\"col\">\r\n                        <h5>End Time</h5>\r\n                        <DatePicker\r\n                            selected={props.endTime}\r\n                            onChange={date => handleEndTime(date)}\r\n                            showTimeSelect\r\n                            showTimeSelectOnly\r\n                            timeIntervals={15}\r\n                            timeCaption=\"Time\"\r\n                            dateFormat=\"HH:mm\"\r\n                            timeFormat=\"HH:mm\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Button onClick={handleSubmit}>Add</Button>\r\n                {props.error && <span className=\"col md-8\">{props.error}</span>}\r\n            </form>\r\n                \r\n            </Modal.Body>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nModalForm.propTypes = {\r\n    onClose: PropTypes.func.isRequired,\r\n    show: PropTypes.bool.isRequired,\r\n    handleSelectedDate: PropTypes.func.isRequired,\r\n    handleStartTime: PropTypes.func.isRequired,\r\n    handleEndTime: PropTypes.func.isRequired,\r\n    selectedDate: PropTypes.instanceOf(Date).isRequired,\r\n    startTime: PropTypes.instanceOf(Date).isRequired,\r\n    endTime: PropTypes.instanceOf(Date).isRequired\r\n  };\r\n\r\nexport default ModalForm;","C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\api\\apiFunc.js",[],"C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\config.js",[],["58","59"],"C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\core\\DisplayItem.js",[],"C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\core\\Appointment.js",["60","61","62","63","64"],"import React, {useState, useEffect} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nimport TableData from './TableData';\r\n\r\n\r\nimport {getAppointmentData, listAppointments } from '../api/apiFunc';\r\n\r\nconst Appointment = () => {\r\n    const [appointmentData, setAppointmentData] = useState([])\r\n    const [appointmentSearched, setAppointmentSearched] = useState(false);\r\n    const [dateForAppointmentDisplay, setDateForAppointmentDisplay] = useState(new Date());\r\n\r\n    const [error, setError] = useState(false);\r\n    const [success, setSuccess] = useState(false);\r\n\r\n\r\n    const listAppointmentData = () => (\r\n        getAppointmentData().then(data =>{\r\n            console.log(\"Data: \", data)\r\n            if(data.error){\r\n                setError(data.error);\r\n            }else{\r\n                console.log(\"Data from DB: \", data);\r\n                setAppointmentData(data);\r\n                setAppointmentSearched(false);\r\n                // console.log(\"Appointment Data: \", appointmentData);\r\n            }\r\n        })\r\n    )\r\n\r\n    useEffect(()=>{\r\n        listAppointmentData();\r\n        displaySlots();\r\n    }, []);\r\n\r\n    const searchAppointmentData = (date) => {\r\n        if(date){\r\n            listAppointments({selectedDate: date || undefined})\r\n            .then(response => {\r\n                if(response.error){\r\n                    console.log(response.error);\r\n                }else{\r\n                    setAppointmentSearched(response);\r\n                    setAppointmentData(false);\r\n                    console.log(\"Searched Result: \", appointmentSearched);\r\n                }\r\n            })\r\n        }\r\n    };\r\n    const searchAppointmentSubmit = (event) => {\r\n        event.preventDefault();\r\n        let day = dateForAppointmentDisplay.getDate();\r\n        let month = dateForAppointmentDisplay.getMonth() + 1;\r\n        let year = dateForAppointmentDisplay.getFullYear();\r\n        let date = `${month}-${day}-${year}`\r\n        searchAppointmentData(date);\r\n    }\r\n\r\n    const selectDate = () =>(\r\n        <form onSubmit={searchAppointmentSubmit}>\r\n            <div>\r\n                <DatePicker selected={dateForAppointmentDisplay} dateFormat=\"dd/MM/yyyy\" showYearDropdown onChange={date => setDateForAppointmentDisplay(date)} />\r\n                <button className=\"input-group-text\">Search</button>\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n    const displaySlots = () => (\r\n        <div>\r\n            <h2>List Appointments:</h2> {selectDate()}\r\n                {/* {JSON.stringify(slotResult)} */}\r\n            <div className=\"row\">\r\n                {appointmentData && <TableData data={appointmentData} dataLength={appointmentData.length}/>}\r\n                {appointmentSearched && <TableData data={appointmentSearched} dataLength={appointmentSearched.length} />}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    const showMenu = () => {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"container\">\r\n                <ul className=\"nav bg-primary\">\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"btn btn-primary\" to=\"/doctor/dashboard\" >List Slots</Link>\r\n                    </li>\r\n    \r\n                    <li className=\"nav-item\">\r\n                        <button className=\"btn btn-primary\">Add Slot</button>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"btn btn-primary\" to=\"/doctor/appointments\" >Appointments</Link>\r\n                    </li>\r\n                </ul>\r\n                </div>\r\n                    <div className=\"container\">\r\n                        {displaySlots()}\r\n                    </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    return(\r\n        <div>\r\n            {showMenu()}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Appointment;","C:\\Users\\farookjintha\\Desktop\\Projects-FJ\\Doctor-Appointment\\Doctor-Appointment\\client\\src\\core\\TableData.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":2,"column":8,"nodeType":"71","messageId":"72","endLine":2,"endColumn":16},{"ruleId":"69","severity":1,"message":"73","line":10,"column":37,"nodeType":"71","messageId":"72","endLine":10,"endColumn":55},{"ruleId":"69","severity":1,"message":"74","line":10,"column":57,"nodeType":"71","messageId":"72","endLine":10,"endColumn":73},{"ruleId":"69","severity":1,"message":"75","line":15,"column":12,"nodeType":"71","messageId":"72","endLine":15,"endColumn":21},{"ruleId":"69","severity":1,"message":"76","line":15,"column":23,"nodeType":"71","messageId":"72","endLine":15,"endColumn":35},{"ruleId":"69","severity":1,"message":"77","line":18,"column":22,"nodeType":"71","messageId":"72","endLine":18,"endColumn":33},{"ruleId":"78","severity":1,"message":"79","line":72,"column":8,"nodeType":"80","endLine":72,"endColumn":10,"suggestions":"81"},{"ruleId":"69","severity":1,"message":"82","line":1,"column":16,"nodeType":"71","messageId":"72","endLine":1,"endColumn":24},{"ruleId":"69","severity":1,"message":"83","line":1,"column":26,"nodeType":"71","messageId":"72","endLine":1,"endColumn":35},{"ruleId":"65","replacedBy":"84"},{"ruleId":"67","replacedBy":"85"},{"ruleId":"69","severity":1,"message":"70","line":2,"column":8,"nodeType":"71","messageId":"72","endLine":2,"endColumn":16},{"ruleId":"69","severity":1,"message":"86","line":17,"column":12,"nodeType":"71","messageId":"72","endLine":17,"endColumn":17},{"ruleId":"69","severity":1,"message":"87","line":18,"column":12,"nodeType":"71","messageId":"72","endLine":18,"endColumn":19},{"ruleId":"69","severity":1,"message":"88","line":18,"column":21,"nodeType":"71","messageId":"72","endLine":18,"endColumn":31},{"ruleId":"78","severity":1,"message":"89","line":38,"column":8,"nodeType":"80","endLine":38,"endColumn":10,"suggestions":"90"},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'getAppointmentData' is defined but never used.","'listAppointments' is defined but never used.","'showSlots' is assigned a value but never used.","'setShowSlots' is assigned a value but never used.","'setIsBooked' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'displaySlots' and 'listSlots'. Either include them or remove the dependency array.","ArrayExpression",["93"],"'useState' is defined but never used.","'useEffect' is defined but never used.",["91"],["92"],"'error' is assigned a value but never used.","'success' is assigned a value but never used.","'setSuccess' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'displaySlots'. Either include it or remove the dependency array.",["94"],"no-global-assign","no-unsafe-negation",{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},"Update the dependencies array to be: [displaySlots, listSlots]",{"range":"99","text":"100"},"Update the dependencies array to be: [displaySlots]",{"range":"101","text":"102"},[2540,2542],"[displaySlots, listSlots]",[1263,1265],"[displaySlots]"]